#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
"""

import os
import asyncio
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
import socket

load_dotenv()

async def test_atlas_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas...")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
    try:
        host = "cluster0.5uejhpq.mongodb.net"
        ip = socket.gethostbyname(host)
        print(f"‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {host} -> {ip}")
    except Exception as e:
        print(f"‚ùå DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...")
    try:
        mongo_url = os.environ['MONGO_URL']
        print(f"üîó –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {mongo_url}")
        
        client = AsyncIOMotorClient(
            mongo_url,
            serverSelectionTimeoutMS=10000,  # 10 —Å–µ–∫—É–Ω–¥ timeout
            connectTimeoutMS=10000
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        server_info = await client.server_info()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìç –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {server_info.get('version', 'Unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = client[os.environ['DB_NAME']]
        collections = await db.list_collection_names()
        print(f"üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.environ['DB_NAME']}")
        print(f"üìö –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {len(collections)} –Ω–∞–π–¥–µ–Ω–æ")
        
        if collections:
            print("   –ö–æ–ª–ª–µ–∫—Ü–∏–∏:", ", ".join(collections))
        else:
            print("   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π...")
        test_collection = db.connection_test
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        test_doc = {"test": "connection", "timestamp": "2025-07-02"}
        result = await test_collection.insert_one(test_doc)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {result.inserted_id}")
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å
        found_doc = await test_collection.find_one({"test": "connection"})
        if found_doc:
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞: {found_doc['timestamp']}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await test_collection.delete_one({"test": "connection"})
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
        
        client.close()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ MongoDB Atlas –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'Inactive')")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Network Access (IP Whitelist) –≤ MongoDB Atlas")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è")
        
        return False

if __name__ == "__main__":
    result = asyncio.run(test_atlas_connection())
    exit(0 if result else 1)