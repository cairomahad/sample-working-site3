#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è Supabase
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ PATH
backend_path = Path(__file__).parent
sys.path.append(str(backend_path))

from supabase_client import supabase_client

async def ensure_quality_courses():
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
        all_courses = await supabase_client.get_records('courses')
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã —Å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        test_course_names = ['–æ–ª–∏–ø–æ', '–æ–∏–æ–º', '—Ç–µ—Å—Ç', 'test']
        
        for course in all_courses:
            if course.get('title', '').lower() in test_course_names:
                await supabase_client.delete_record('courses', 'id', course['id'])
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å: {course['title']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        quality_courses = await supabase_client.get_records('courses', filters={'status': 'published'})
        
        if len(quality_courses) < 3:
            print("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–º–æ-–∫—É—Ä—Å–æ–≤...")
            await create_quality_courses()
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∫—É—Ä—Å–æ–≤: {len(await supabase_client.get_records('courses', filters={'status': 'published'}))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–æ–≤: {e}")

async def create_quality_courses():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    
    import uuid
    
    quality_courses = [
        {
            "id": str(uuid.uuid4()),
            "title": "–û—Å–Ω–æ–≤—ã –ò—Å–ª–∞–º–∞",
            "description": "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤ –∏—Å–ª–∞–º—Å–∫–æ–π –≤–µ—Ä—ã, –≤–∫–ª—é—á–∞—é—â–∏–π –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–ø–æ–≤ –∏—Å–ª–∞–º–∞, –≤–µ—Ä—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä—è–¥–æ–≤.",
            "slug": "osnovy-islama",
            "image_url": "https://images.unsplash.com/photo-1591604466107-ec97de577aff?w=500&h=300&fit=crop",
            "level": "level_1",
            "difficulty": "easy",
            "estimated_duration_hours": 32,
            "lessons_count": 8,
            "tests_count": 3,
            "order": 1,
            "status": "published",
            "teacher_id": str(uuid.uuid4()),
            "teacher_name": "–ò–º–∞–º –ê–ª–∏ –ï–≤—Ç–µ–µ–≤",
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat()
        },
        {
            "id": str(uuid.uuid4()),
            "title": "–û—á–∏—â–µ–Ω–∏–µ –∏ –º–æ–ª–∏—Ç–≤–∞",
            "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ—á–∏—â–µ–Ω–∏—è (—Ç–∞—Ö–∞—Ä–∞) –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–ª–∏—Ç–≤—ã (—Å–∞–ª—è—Ç) —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ª–∞–º—Å–∫–∏–º —Ç—Ä–∞–¥–∏—Ü–∏—è–º.",
            "slug": "ochischenie-i-molitva",
            "image_url": "https://images.unsplash.com/photo-1586592670929-4c1b7cbe65f3?w=500&h=300&fit=crop",
            "level": "level_1",
            "difficulty": "easy",
            "estimated_duration_hours": 24,
            "lessons_count": 6,
            "tests_count": 2,
            "order": 2,
            "status": "published",
            "teacher_id": str(uuid.uuid4()),
            "teacher_name": "–£—Å—Ç–∞–∑ –ê–±–¥—É–ª—å-–ë–∞—Å–∏—Ç",
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat()
        },
        {
            "id": str(uuid.uuid4()),
            "title": "–ò–∑—É—á–µ–Ω–∏–µ –ö–æ—Ä–∞–Ω–∞",
            "description": "–ö—É—Ä—Å –ø–æ—Å–≤—è—â–µ–Ω –∏–∑—É—á–µ–Ω–∏—é –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ö–æ—Ä–∞–Ω–∞: –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –æ—Å–Ω–æ–≤–Ω—ã–º —Å—É—Ä–∞–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —á—Ç–µ–Ω–∏—è.",
            "slug": "izuchenie-korana",
            "image_url": "https://images.unsplash.com/photo-1606813074854-ad1df3b8e00a?w=500&h=300&fit=crop",
            "level": "level_2",
            "difficulty": "medium",
            "estimated_duration_hours": 48,
            "lessons_count": 12,
            "tests_count": 4,
            "order": 3,
            "status": "published",
            "teacher_id": str(uuid.uuid4()),
            "teacher_name": "–•–∞—Ñ–∏–∑ –ú–∏–∫–∞–∏–ª—å",
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat()
        }
    ]
    
    for course_data in quality_courses:
        try:            
            await supabase_client.create_record('courses', course_data)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫—É—Ä—Å: {course_data['title']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ '{course_data['title']}': {e}")

async def ensure_admin_user():
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–¥–º–∏–Ω–∞"""
    import uuid
    try:
        admin = await supabase_client.get_record('admin_users', 'email', 'admin@uroki-islama.ru')
        if not admin:
            admin_data = {
                "id": str(uuid.uuid4()),
                "username": "admin",
                "email": "admin@uroki-islama.ru",
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                "role": "admin",
                "is_active": True,
                "created_at": datetime.utcnow().isoformat(),
                "updated_at": datetime.utcnow().isoformat(),
                "last_login": None
            }
            
            await supabase_client.create_record('admin_users', admin_data)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω: admin@uroki-islama.ru / admin123")
        else:
            print("‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: {e}")

async def ensure_team_members():
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    import uuid
    try:
        team_count = await supabase_client.count_records('team_members')
        if team_count < 3:
            team_members = [
                {
                    "id": str(uuid.uuid4()),
                    "name": "–ò–º–∞–º –ê–ª–∏ –ï–≤—Ç–µ–µ–≤",
                    "subject": "–û—Å–Ω–æ–≤—ã –≤–µ—Ä—ã –∏ —ç—Ç–∏–∫–∞",
                    "description": "–ò–º–∞–º —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏—Å–ª–∞–º—Å–∫–æ–π —ç—Ç–∏–∫–µ –∏ –æ—Å–Ω–æ–≤–∞–º –≤–µ—Ä—ã.",
                    "image_base64": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face",
                    "order": 1,
                    "is_active": True,
                    "created_at": datetime.utcnow().isoformat(),
                    "updated_at": datetime.utcnow().isoformat()
                },
                {
                    "id": str(uuid.uuid4()),
                    "name": "–£—Å—Ç–∞–∑ –ê–±–¥—É–ª—å-–ë–∞—Å–∏—Ç",
                    "subject": "–ö–æ—Ä–∞–Ω –∏ —Ö–∞–¥–∏—Å—ã",
                    "description": "–ó–Ω–∞—Ç–æ–∫ –ö–æ—Ä–∞–Ω–∞ –∏ —Ö–∞–¥–∏—Å–æ–≤, –∏–º–µ–µ—Ç –∏–¥–∂–∞–∑—É –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ –ö–æ—Ä–∞–Ω–∞.",
                    "image_base64": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face",
                    "order": 2,
                    "is_active": True,
                    "created_at": datetime.utcnow().isoformat(),
                    "updated_at": datetime.utcnow().isoformat()
                },
                {
                    "id": str(uuid.uuid4()),
                    "name": "–•–∞—Ñ–∏–∑ –ú–∏–∫–∞–∏–ª—å",
                    "subject": "–ò—Å—Ç–æ—Ä–∏—è –ò—Å–ª–∞–º–∞",
                    "description": "–ò—Å—Ç–æ—Ä–∏–∫ –∏—Å–ª–∞–º—Å–∫–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–Ω–Ω–µ–º—É –ø–µ—Ä–∏–æ–¥—É –ò—Å–ª–∞–º–∞.",
                    "image_base64": "https://images.unsplash.com/photo-1519345182560-3f2917c472ef?w=400&h=400&fit=crop&crop=face",
                    "order": 3,
                    "is_active": True,
                    "created_at": datetime.utcnow().isoformat(),
                    "updated_at": datetime.utcnow().isoformat()
                }
            ]
            
            for member in team_members:
                try:
                    await supabase_client.create_record('team_members', member)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã: {member['name']}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {member['name']}")
        else:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ({team_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Supabase - –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await supabase_client.get_records('courses', limit=1)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∞–∫—Ç–∏–≤–Ω–æ")
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await ensure_admin_user()
        await ensure_quality_courses()
        await ensure_team_members()
        
        print("=" * 60)
        print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase")

if __name__ == "__main__":
    asyncio.run(main())