#!/usr/bin/env python3

import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from passlib.context import CryptContext
from datetime import datetime
from models import AdminUser, UserRole
import uuid

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

async def create_admin_user():
    """Create admin user with specified credentials"""
    mongo_url = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
    client = AsyncIOMotorClient(mongo_url)
    db = client[os.getenv('DB_NAME', 'test_database')]
    
    # Admin credentials
    admin_email = "miftahylum@gmail.com"
    admin_password = "197724"
    admin_username = "miftahylum"
    admin_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ú–∏—Ñ—Ç–∞—Ö—é–ª—É–º"
    
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    print(f"Email: {admin_email}")
    print(f"–ü–∞—Ä–æ–ª—å: {admin_password}")
    print(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {admin_username}")
    
    # Check if admin already exists
    existing_admin = await db.admins.find_one({
        "$or": [
            {"email": admin_email},
            {"username": admin_username}
        ]
    })
    
    if existing_admin:
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        # Update existing admin
        hashed_password = pwd_context.hash(admin_password)
        
        await db.admins.update_one(
            {"$or": [{"email": admin_email}, {"username": admin_username}]},
            {"$set": {
                "username": admin_username,
                "email": admin_email,
                "full_name": admin_name,
                "hashed_password": hashed_password,
                "role": UserRole.SUPER_ADMIN,
                "is_active": True,
                "updated_at": datetime.utcnow()
            }}
        )
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        # Create new admin
        hashed_password = pwd_context.hash(admin_password)
        
        admin_obj = AdminUser(
            username=admin_username,
            email=admin_email,
            full_name=admin_name,
            role=UserRole.SUPER_ADMIN
        )
        
        admin_dict = admin_obj.dict()
        admin_dict["hashed_password"] = hashed_password
        
        await db.admins.insert_one(admin_dict)
        print("‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")
    
    # Verify admin can login
    admin = await db.admins.find_one({"email": admin_email})
    if admin:
        is_valid = pwd_context.verify(admin_password, admin["hashed_password"])
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if is_valid else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:")
        print("‚îÄ" * 40)
        print(f"Email: {admin_email}")
        print(f"–ü–∞—Ä–æ–ª—å: {admin_password}")
        print(f"–†–æ–ª—å: {admin.get('role')}")
        print("‚îÄ" * 40)
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç")
        print("2. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –≤ —à–∞–ø–∫–µ")
        print("3. –í–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ email –∏ –ø–∞—Ä–æ–ª—å")
        print("4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, —á—Ç–æ –≤—ã –∞–¥–º–∏–Ω")
        print("5. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    
    # Also update the default admin credentials if it exists
    default_admin = await db.admins.find_one({"username": "admin"})
    if default_admin:
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞...")
        backup_password = "admin123"
        backup_hashed = pwd_context.hash(backup_password)
        
        await db.admins.update_one(
            {"username": "admin"},
            {"$set": {
                "email": "admin@uroki-islama.ru",
                "hashed_password": backup_hashed,
                "updated_at": datetime.utcnow()
            }}
        )
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–¥–º–∏–Ω (admin/admin123) —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    client.close()

if __name__ == "__main__":
    asyncio.run(create_admin_user())