#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import os
import re
from pathlib import Path

def find_imports_in_file(file_path):
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        local_imports = re.findall(r'import.*from\s+[\'"]\.\/([^\'"]+)[\'"]', content)
        return local_imports
    except:
        return []

def analyze_used_components():
    """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    src_path = Path('/app/frontend/src')
    all_files = set()
    used_files = set()
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ JS —Ñ–∞–π–ª—ã
    for file in src_path.glob('*.js'):
        all_files.add(file.stem)
    
    print("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ /app/frontend/src:")
    for file in sorted(all_files):
        print(f"  - {file}.js")
    
    # –ù–∞—á–∞—Ç—å —Å main —Ñ–∞–π–ª–æ–≤
    to_check = ['App', 'index']
    checked = set()
    
    while to_check:
        current = to_check.pop()
        if current in checked:
            continue
            
        checked.add(current)
        used_files.add(current)
        
        file_path = src_path / f"{current}.js"
        if file_path.exists():
            imports = find_imports_in_file(file_path)
            for imp in imports:
                imp_name = imp.split('.')[0]  # –£–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if imp_name not in checked:
                    to_check.append(imp_name)
    
    print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã ({len(used_files)}):")
    for file in sorted(used_files):
        print(f"  - {file}.js")
    
    unused_files = all_files - used_files
    print(f"\n‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã ({len(unused_files)}):")
    for file in sorted(unused_files):
        print(f"  - {file}.js")
    
    return used_files, unused_files

if __name__ == "__main__":
    used, unused = analyze_used_components()