#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –∫—É—Ä—Å–æ–≤ - –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
sys.path.append('/app/backend')

from supabase_client import supabase_client
import asyncio

async def analyze_demo_courses():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–µ–º–æ –∫—É—Ä—Å—ã"""
    try:
        print("üîç –ê–ù–ê–õ–ò–ó –î–ï–ú–û –ö–£–†–°–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
        courses = await supabase_client.get_records("courses", order_by="created_at")
        
        print(f"üìö –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(courses)}")
        print()
        
        demo_patterns = ["–û—Å–Ω–æ–≤—ã –ò—Å–ª–∞–º–∞", "–û—á–∏—â–µ–Ω–∏–µ –∏ –º–æ–ª–∏—Ç–≤–∞", "–ò–∑—É—á–µ–Ω–∏–µ –ö–æ—Ä–∞–Ω–∞"]
        demo_courses = []
        
        for course in courses:
            print(f"üéì –ö–£–†–°: {course['title']}")
            print(f"   üÜî ID: {course['id']}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {course['created_at']}")
            print(f"   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {course.get('teacher_name', 'N/A')}")
            print(f"   üìñ –£—Ä–æ–∫–æ–≤: {course['lessons_count']}")
            print(f"   üìù –¢–µ—Å—Ç–æ–≤: {course['tests_count']}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {course.get('status', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É—Ä—Å –¥–µ–º–æ
            if any(pattern in course['title'] for pattern in demo_patterns):
                demo_courses.append(course)
                print("   ‚≠ê –î–ï–ú–û –ö–£–†–° –û–ë–ù–ê–†–£–ñ–ï–ù!")
            
            print()
        
        print("=" * 50)
        print(f"üéØ –ù–ê–ô–î–ï–ù–û –î–ï–ú–û –ö–£–†–°–û–í: {len(demo_courses)}")
        
        if demo_courses:
            print("\nüìã –ê–ù–ê–õ–ò–ó –î–ï–ú–û –ö–£–†–°–û–í:")
            for course in demo_courses:
                print(f"   ‚Ä¢ {course['title']}")
                
                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
                lessons = await supabase_client.get_records("lessons", {"course_id": course["id"]})
                if lessons:
                    print(f"     üìö –£—Ä–æ–∫–∏ ({len(lessons)}):")
                    for lesson in lessons[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–∫–∞
                        print(f"       - {lesson.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    if len(lessons) > 3:
                        print(f"       ... –∏ –µ—â—ë {len(lessons) - 3} —É—Ä–æ–∫–æ–≤")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –∫—É—Ä—Å–∞  
                tests = await supabase_client.get_records("tests", {"course_id": course["id"]})
                if tests:
                    print(f"     üìù –¢–µ—Å—Ç—ã ({len(tests)}):")
                    for test in tests[:2]:
                        print(f"       - {test.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    if len(tests) > 2:
                        print(f"       ... –∏ –µ—â—ë {len(tests) - 2} —Ç–µ—Å—Ç–æ–≤")
                
                print()
        
        print("üîé –í–û–ó–ú–û–ñ–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –î–ï–ú–û –î–ê–ù–ù–´–•:")
        print("   1. Supabase SQL —Ñ—É–Ω–∫—Ü–∏–∏/—Ç—Ä–∏–≥–≥–µ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        print("   2. –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è")  
        print("   3. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Supabase Dashboard")
        print("   4. –°–∫—Ä–∏–ø—Ç autostart_supabase.py (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –∫—É—Ä—Å—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        admins = await supabase_client.get_records("admin_users")
        print(f"\nüë®‚Äçüíº –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(admins)}")
        for admin in admins:
            print(f"   ‚Ä¢ {admin.get('email', 'N/A')} (—Å–æ–∑–¥–∞–Ω: {admin.get('created_at', 'N/A')})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(analyze_demo_courses())